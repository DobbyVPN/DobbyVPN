name: Build VPN Libraries

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Tag for new library release"
        required: false
        default: ""
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ windows, ubuntu, macos ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"

      - name: Vendor Cloak/internal
        run: |
          git clone --depth 1 https://github.com/cbeuw/Cloak tmp
          cp -r tmp/internal go_client/modules/Cloak/

      - name: Download Go modules
        run: |
          cd go_client
          go mod download
          go get github.com/refraction-networking/utls@v1.6.7
          cd ..

      - name: Install compiler
        if: matrix.os != 'windows-latest'
        id: install_cc
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: latest

      - name: Verify GCC Installation
        if: matrix.os != 'windows-latest'
        run: |
          gcc --version
          g++ --version

      - name: Build windows library
        if: matrix.os == 'windows'
        run: |
          cd go_client
          go build -buildmode=c-shared -o lib_windows.dll ./desktop_exports/...
        env:
          CGO_ENABLED: "1"
          GOOS: "windows"
          GOARCH: "amd64"
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}

      - name: Build linux library
        if: matrix.os == 'ubuntu'
        run: |
          cd go_client
          go build -buildmode=c-shared -o lib_linux.so ./desktop_exports/...
        env:
          CGO_ENABLED: "1"
          GOOS: "linux"
          GOARCH: "amd64"
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}

      - name: Build macos library
        if: matrix.os == 'macos'
        run: |
          cd go_client
          go build -buildmode=c-shared -o lib_mac.dylib ./desktop_exports/...
        env:
          CGO_ENABLED: "1"
          GOOS: "darwin"
          GOARCH: "arm64"
          CC: ${{ steps.install_cc.outputs.cc }}
          CXX: ${{ steps.install_cc.outputs.cxx }}

      - name: Upload Built Libraries
        uses: actions/upload-artifact@master
        with:
          name: "lib_${{ matrix.os }}"
          path: |
            go_client/lib_windows.dll
            go_client/lib_linux.so
            go_client/lib_mac.dylib

  prepare_go_client_android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Vendor Cloak/internal
        run: |
          git clone --depth 1 https://github.com/cbeuw/Cloak tmp
          mkdir -p go_client/modules/Cloak
          cp -r tmp/internal go_client/modules/Cloak/
          rm -rf tmp

      - name: Download Go modules
        run: |
          cd go_client
          go mod download
          cd ..

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: >
            platforms;android-36
            build-tools;36.0.0
            platform-tools
            ndk;27.0.11718014

      - name: Set up Android NDK and build arm64 .so
        run: |
          export ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.0.11718014
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          export CC=aarch64-linux-android21-clang
          export CXX=aarch64-linux-android21-clang++
  
  
          cd go_client
          go build -v -buildmode=c-shared -o liboutline.so ./kotlin_exports/...
          cd ..

          mkdir -p ck-android/CkClient/outline/src/main/cpp/include
          mkdir -p ck-android/CkClient/outline/src/main/jniLibs/arm64-v8a
          cp go_client/liboutline.h ck-android/CkClient/outline/src/main/cpp/include/liboutline.h
          cp go_client/liboutline.so ck-android/CkClient/outline/src/main/jniLibs/arm64-v8a/liboutline.so
        env:
          CGO_ENABLED: "1"
          GOOS: "android"
          GOARCH: "arm64"


      - name: Build .aar
        run: |
          cd ck-android/CkClient
          ./gradlew :outline:build

      - name: Tree
        run: |
          ls
          tree

      - name: Upload So
        uses: actions/upload-artifact@master
        with:
          name: liboutline.so
          path: ck-android/CkClient/outline/src/main/jniLibs/arm64-v8a/liboutline.so

      - name: Upload Go AAR
        uses: actions/upload-artifact@master
        with:
          name: outline-debug.aar
          path: ck-android/CkClient/outline/build/outputs/aar/outline-debug.aar

  release:
    if: ${{ github.event.inputs.release_tag != '' }}
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make release dir
        run: mkdir release

      - name: Download windows library
        uses: actions/download-artifact@master
        with:
          name: lib_windows
          path: release

      - name: Download linux library
        uses: actions/download-artifact@master
        with:
          name: lib_ubuntu
          path: release

      - name: Download macos library
        uses: actions/download-artifact@master
        with:
          name: lib_macos
          path: release

      - name: Download android library
        uses: actions/download-artifact@master
        with:
          name: outline-debug.aar
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          tag_name: ${{ github.event.inputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
